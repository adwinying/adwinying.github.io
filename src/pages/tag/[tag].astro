---
import { getCollection } from "astro:content";

import Footer from "@/components/Footer.astro";
import BlogHeader from "@/features/blog/BlogHeader.astro";
import BlogPostEntries from "@/features/blog/BlogPostEntries.astro";
import BaseLayout from "@/layouts/base.astro";

export async function getStaticPaths() {
  const posts = await getCollection(
    "posts",
    ({ data }) => process.env.NODE_ENV === "development" || !data.draft,
  );
  const tags = [...new Set(posts.map((post) => post.data.tags).flat())];

  return tags.map((tag) => {
    const filteredPosts = posts
      .filter((post) => post.data.tags.includes(tag))
      .map(({ slug, data }) => ({
        title: data.title,
        slug,
        date: data.date,
        tags: data.tags,
      }));

    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

interface Props {
  posts: Awaited<ReturnType<typeof getStaticPaths>>[0]["props"]["posts"];
}

const tag = Astro.params.tag ?? "";
const { posts } = Astro.props;
---

<BaseLayout
  title={`Posts Tagged ${tag}`}
  description={`A list of posts that are tagged with ${tag}`}
>
  <BlogHeader />

  <div class="mb-12 mt-4 flex-grow mx-auto w-full max-w-blog px-5">
    <h1 class="mb-6 font-sans text-4xl font-bold">
      Posts Tagged: {tag}
    </h1>

    <BlogPostEntries
      posts={posts
        .sort((a, b) => b.date.getTime() - a.date.getTime())
        .map((post) => ({
          url: `/${post.slug}/`,
          title: post.title,
          date: post.date,
          tags: post.tags,
        }))}
    />
  </div>

  <Footer />
</BaseLayout>
